---
# Source: object-order/templates/01-a.yml
# 1
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: first
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/01-a.yml
# 2
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: second
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/01-a.yml
# 3
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: third
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/02-b.yml
# 5
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fifth
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/02-b.yml
# 7
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: seventh
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/02-b.yml
# 8
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: eighth
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/02-b.yml
# 9
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ninth
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/02-b.yml
# 10
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: tenth
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/02-b.yml
# 11
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: eleventh
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/02-b.yml
# 12
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: twelfth
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/02-b.yml
# 13
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: thirteenth
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/02-b.yml
# 14
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fourteenth
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/02-b.yml
# 15 (11th object within 02-b.yml, in order to test `SplitManifests` which assigns `manifest-10`
# to this object which should then come *after* `manifest-9`)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fifteenth
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: object-order/templates/01-a.yml
# 4 (Deployment should come after all NetworkPolicy manifests, since 'helm template' outputs in install order)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fourth
spec:
  selector:
    matchLabels:
      pod: fourth
  replicas: 1
  template:
    metadata:
      labels:
        pod: fourth
    spec:
      containers:
        - name: hello-world
          image: gcr.io/google-samples/node-hello:1.0
---
# Source: object-order/templates/02-b.yml
# 6 (implementation detail: currently, 'helm template' outputs hook manifests last; and yes, NetworkPolicy won't make a reasonable hook, this is just a dummy unit test manifest)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  annotations:
    "helm.sh/hook": pre-install
  name: sixth
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
